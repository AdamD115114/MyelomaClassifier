// Generated by info.scce.cinco.product.minidime.generator.tuple.TupleGenerator
	
package tuple

import java.util.Iterator
import java.util.NoSuchElementException
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * An abstract super class for tuples. A tuple is a finite ordered list of elements.
 * <p>
 * The largest tuple is {@linkplain Tuple10} with a dimensionality of 10.
 * Larger tuples will be generated as needed. (Depends on the largest number of ports in an
 * {@linkplain sib.atomic.AtomicSib AtomicSib} or its {@linkplain sib.atomic.AtomicBranch branches}.)
 */
abstract class Tuple implements Iterable<Object> {
	
	/**
	 * Returns the dimensionality of this tuple.
	 */
	def int getDim()
	
	/**
	 * Returns the element at the provided <code>index</code>.
	 * @throws IndexOutOfBoundsException if the <code>index</code> is not in
	 *         the range <code>0 ..< </code>{@link #getDim() getDim()}.
	 */
	def get(int index) {
		switch it : this {
			Tuple1<?> case index == 0: element0
			Tuple2<?, ?> case index == 1: element1
			Tuple3<?, ?, ?> case index == 2: element2
			Tuple4<?, ?, ?, ?> case index == 3: element3
			Tuple5<?, ?, ?, ?, ?> case index == 4: element4
			Tuple6<?, ?, ?, ?, ?, ?> case index == 5: element5
			Tuple7<?, ?, ?, ?, ?, ?, ?> case index == 6: element6
			Tuple8<?, ?, ?, ?, ?, ?, ?, ?> case index == 7: element7
			Tuple9<?, ?, ?, ?, ?, ?, ?, ?, ?> case index == 8: element8
			Tuple10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> case index == 9: element9
			default: throw new IndexOutOfBoundsException
		}
	}
	
	/**
	 * Indicates whether some other tuple is "equal to" this one. A tuple is
	 * equal to another tuple, iff all of their elements are pairwise equal to
	 * each other.
	 * @see Object#equals(Object) Object.equals(Object)
	 */
	override equals(Object other) {
		switch other {
			case null: {
				return false
			}
			case this: {
				return true
			}
			Tuple case this.dim == other.dim: {
				for (i : 0 ..< dim) {
					if (this.get(i) != other.get(i)) {
						return false
					}
				}
				return true
			}
			default: {
				return false
			}
		}
	}
	
	/**
	 * Returns a string representation of the tuple.
	 * @see Object#toString() Object.toString()
	 */
	override toString() {
		join('(', ', ', ')') [toString]
	}
	
	/**
	 * Returns an iterator over the elements of this tuple.
	 * @see Iterable#iterator() Iterable.iterator()
	 */
	override iterator() {
		new TupleIterator(this)
	}
	
	/**
	 * An {@linkplain Iterator} over a {@linkplain Tuple}.
	 */
	static class TupleIterator implements Iterator<Object> {
		
		/**
		 * The tuple over which to iterate.
		 */
		val Tuple tuple
		
		/**
		 * The index of the current element. If this value equals -1, then no element
		 * has been returned yet.
		 */
		var int currentIndex
		
		/**
		 * Creates a new iterator for the specified <code>tuple</code>.
		 */
		new(Tuple tuple) {
			this.tuple = tuple
			this.currentIndex = -1
		}
		
		/**
		 * Returns {@code true} if the iteration has more elements.
		 * @ see java.util.Iterator#hasNext() Iterator.hasNext()
		 */
		override hasNext() {
			currentIndex < tuple.dim - 1
		}
		
		/**
	     * Returns the next element in the iteration.
	     * @throws NoSuchElementException if the iteration has no more elements.
	     * @see java.util.Iterator#next() Iterator.next()
	     */
		override next() {
			if (hasNext) {
				currentIndex += 1
				return tuple.get(currentIndex)
			}
			else {
				throw new NoSuchElementException
			}
		}
		
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 1.
 */
@Accessors
class Tuple1<T0> extends Tuple {
	
	/**
	 * The 1st element (element with index 0) of this tuple.
	 */
	val T0 element0
	
	/**
	 * Creates a new tuple with dimensionality 1.
	 */
	new(T0 element0) {
		super()
		this.element0 = element0
	}
	
	/**
	 * Returns the dimensionality of this tuple (1).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		1
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 2.
 */
@Accessors
class Tuple2<T0, T1> extends Tuple1<T0> {
	
	/**
	 * The 2nd element (element with index 1) of this tuple.
	 */
	val T1 element1
	
	/**
	 * Creates a new tuple with dimensionality 2.
	 */
	new(T0 element0, T1 element1) {
		super(element0)
		this.element1 = element1
	}
	
	/**
	 * Returns the dimensionality of this tuple (2).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		2
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 3.
 */
@Accessors
class Tuple3<T0, T1, T2> extends Tuple2<T0, T1> {
	
	/**
	 * The 3rd element (element with index 2) of this tuple.
	 */
	val T2 element2
	
	/**
	 * Creates a new tuple with dimensionality 3.
	 */
	new(T0 element0, T1 element1, T2 element2) {
		super(element0, element1)
		this.element2 = element2
	}
	
	/**
	 * Returns the dimensionality of this tuple (3).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		3
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 4.
 */
@Accessors
class Tuple4<T0, T1, T2, T3> extends Tuple3<T0, T1, T2> {
	
	/**
	 * The 4th element (element with index 3) of this tuple.
	 */
	val T3 element3
	
	/**
	 * Creates a new tuple with dimensionality 4.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3) {
		super(element0, element1, element2)
		this.element3 = element3
	}
	
	/**
	 * Returns the dimensionality of this tuple (4).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		4
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 5.
 */
@Accessors
class Tuple5<T0, T1, T2, T3, T4> extends Tuple4<T0, T1, T2, T3> {
	
	/**
	 * The 5th element (element with index 4) of this tuple.
	 */
	val T4 element4
	
	/**
	 * Creates a new tuple with dimensionality 5.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4) {
		super(element0, element1, element2, element3)
		this.element4 = element4
	}
	
	/**
	 * Returns the dimensionality of this tuple (5).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		5
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 6.
 */
@Accessors
class Tuple6<T0, T1, T2, T3, T4, T5> extends Tuple5<T0, T1, T2, T3, T4> {
	
	/**
	 * The 6th element (element with index 5) of this tuple.
	 */
	val T5 element5
	
	/**
	 * Creates a new tuple with dimensionality 6.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4, T5 element5) {
		super(element0, element1, element2, element3, element4)
		this.element5 = element5
	}
	
	/**
	 * Returns the dimensionality of this tuple (6).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		6
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 7.
 */
@Accessors
class Tuple7<T0, T1, T2, T3, T4, T5, T6> extends Tuple6<T0, T1, T2, T3, T4, T5> {
	
	/**
	 * The 7th element (element with index 6) of this tuple.
	 */
	val T6 element6
	
	/**
	 * Creates a new tuple with dimensionality 7.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4, T5 element5, T6 element6) {
		super(element0, element1, element2, element3, element4, element5)
		this.element6 = element6
	}
	
	/**
	 * Returns the dimensionality of this tuple (7).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		7
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 8.
 */
@Accessors
class Tuple8<T0, T1, T2, T3, T4, T5, T6, T7> extends Tuple7<T0, T1, T2, T3, T4, T5, T6> {
	
	/**
	 * The 8th element (element with index 7) of this tuple.
	 */
	val T7 element7
	
	/**
	 * Creates a new tuple with dimensionality 8.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4, T5 element5, T6 element6, T7 element7) {
		super(element0, element1, element2, element3, element4, element5, element6)
		this.element7 = element7
	}
	
	/**
	 * Returns the dimensionality of this tuple (8).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		8
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 9.
 */
@Accessors
class Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> extends Tuple8<T0, T1, T2, T3, T4, T5, T6, T7> {
	
	/**
	 * The 9th element (element with index 8) of this tuple.
	 */
	val T8 element8
	
	/**
	 * Creates a new tuple with dimensionality 9.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4, T5 element5, T6 element6, T7 element7, T8 element8) {
		super(element0, element1, element2, element3, element4, element5, element6, element7)
		this.element8 = element8
	}
	
	/**
	 * Returns the dimensionality of this tuple (9).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		9
	}
	
}

/**
 * A concrete class for tuples with a dimensionality of 10.
 */
@Accessors
class Tuple10<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> extends Tuple9<T0, T1, T2, T3, T4, T5, T6, T7, T8> {
	
	/**
	 * The 10th element (element with index 9) of this tuple.
	 */
	val T9 element9
	
	/**
	 * Creates a new tuple with dimensionality 10.
	 */
	new(T0 element0, T1 element1, T2 element2, T3 element3, T4 element4, T5 element5, T6 element6, T7 element7, T8 element8, T9 element9) {
		super(element0, element1, element2, element3, element4, element5, element6, element7, element8)
		this.element9 = element9
	}
	
	/**
	 * Returns the dimensionality of this tuple (10).
	 * @see Tuple#getDim() Tuple.getDim()
	 */
	override getDim() {
		10
	}
	
}
